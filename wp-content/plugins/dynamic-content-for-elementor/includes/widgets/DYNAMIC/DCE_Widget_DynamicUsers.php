<?php

namespace DynamicContentForElementor\Widgets;

use Elementor\Controls_Manager;
use Elementor\Group_Control_Image_Size;
use Elementor\Repeater;
use Elementor\Scheme_Color;
use Elementor\Scheme_Typography;
use Elementor\Group_Control_Typography;
use Elementor\Group_Control_Border;
use Elementor\Group_Control_Box_Shadow;
use DynamicContentForElementor\DCE_Helper;
use DynamicContentForElementor\Controls\DCE_Group_Control_Filters_CSS;

if (!defined('ABSPATH'))
    exit; // Exit if accessed directly

/**
 * Elements EDC Dynamic Users
 *
 * Single post/page author for Dynamic Content for Elementor.
 *
 */

class DCE_Widget_DynamicUsers extends DCE_Widget_Prototype {

    public function get_name() {
        return 'dyncontel-dynamicusers';
    }

    static public function get_position() {
        return 2;
    }

    static public function is_enabled() {
        return true;
    }

    public function get_title() {
        return __('Dynamic Users', 'dynamic-content-for-elementor');
    }

    public function get_description() {
        return __('Create an archive based on data generated by users', 'dynamic-content-for-elementor');
    }

    public function get_docs() {
        return 'https://www.dynamic.ooo/widget/dynamic-users/';
    }

    public function get_icon() {
        return 'icon-dyn-users';
    }

    public function get_script_depends() {
        return ['imagesloaded', 'isotope'];
    }

    protected function _register_controls() {

        $user_meta = DCE_Helper::get_user_metas();

        $this->start_controls_section(
            'options_users', [
                'label' => __('Options', 'dynamic-content-for-elementor'),
            ]
        );
        $this->add_control(
            'single_autor', [
                'label' => __('Single author', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::HEADING,
            ]
        );
        $this->add_control(
            'author_user', [
                'label' => __('Author', 'dynamic-content-for-elementor'),
                'description' => 'Select yes for use the author of this page or post.',
                'type' => Controls_Manager::SWITCHER,
            ]
        );
        $this->add_control(
                'use_link',
                [
                    'label' => __('Use Link', 'dynamic-content-for-elementor'),
                    'type' => Controls_Manager::SWITCHER,
                    'default' => 'yes',
                    'sparator' => 'before'
                ]
        );
        
        //----------------------[ORDERING]
        $this->add_control(
            'ordering_heading', [
                'label' => __('Ordering', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::HEADING,
                'separator' => 'before'
            ]
        );
        $this->add_control(
            'users_orderby', [
                'label' => __('Order by', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::SELECT,
                'options' => array(
                    
                    'ID' => __('ID', 'dynamic-content-for-elementor'), 
                    'login' => __('login', 'dynamic-content-for-elementor'), 
                    'nicename' => __('Nicename', 'dynamic-content-for-elementor'), 
                    'email' => __('Email', 'dynamic-content-for-elementor'), 
                    'url' => __('Url', 'dynamic-content-for-elementor'), 
                    'registered' => __('Registered', 'dynamic-content-for-elementor'), 
                    'display_name' => __('Display Name', 'dynamic-content-for-elementor'), 
                    'post_count' => __('Post Count', 'dynamic-content-for-elementor'), 
                    //'include' => __('include', 'dynamic-content-for-elementor'), 
                    'meta_value' => __('Meta Value (String)', 'dynamic-content-for-elementor'),
                    'meta_value_num' => __('Meta Value (Number)', 'dynamic-content-for-elementor'),
                ),
                'default' => 'ID',
            ]
        );
        /*$this->add_control(
            'users_orderby_meta', 
                [
                    'label' => __('Meta value', 'dynamic-content-for-elementor'),
                    'type' => Controls_Manager::SELECT2,
                    'options' => $user_meta,
                    'multiple' => false,
                    //'render_type' => 'template',
                    'default' => 'nickname',
                    'condition' => [
                        'users_orderby' => ['meta_value','meta_value_num'],
                    ],
            ]
        );*/
        $this->add_control(
            'users_orderby_meta',
                [
                    'label' => __('Meta value', 'dynamic-content-for-elementor'),
                    'type'      => 'ooo_query',
                    'placeholder'   => __( 'Field key or Name', 'dynamic-content-for-elementor' ),
                    'label_block'   => true,
                    'query_type'    => 'fields',
                    'object_type'   => 'user',
                    'default' => 'nickname',
                    'condition' => [
                        'users_orderby' => ['meta_value','meta_value_num'],
                    ],
                ]
        );
        $this->add_control(
            'users_order', [
                'label' => __('Sorting', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::CHOOSE,
                'options' => [
                    'ASC' => [
                        'title' => __('ASC', 'dynamic-content-for-elementor'),
                        'icon' => 'fa fa-sort-up',
                    ],
                    'DESC' => [
                        'title' => __('DESC', 'dynamic-content-for-elementor'),
                        'icon' => 'fa fa-sort-down',
                    ]
                ],
                'toggle' => false,
                'default' => 'ASC',
            ]
        );
        //----------------------[FILTERS]
        $this->add_control(
            'filters_heading', [
                'label' => __('Filters', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::HEADING,
                'separator' => 'before'
            ]
        );
        
        $this->add_control(
            'roles', [
                'label' => __('Roles', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::SELECT2,
                'options' => DCE_Helper::get_roles(),
                'multiple' => true,
                //'render_type' => 'template',
                'default' => array()
            ]
        );
        
        /* $this->add_control(
          'allAcf',
          [
          'label' => __( 'All ACF', 'dynamic-content-for-elementor' ),
          'type' => Controls_Manager::SELECT,
          'options' => DCE_Helper::getAll_acf(),
          'multiple' => true,
          //'render_type' => 'template',
          'default' => array()
          ]
        ); */
        /*$this->add_control(
            'metaFilter', [
                'label' => __('Meta Filter', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::SELECT2,
                'options' => $user_meta,
                'multiple' => false,
                //'render_type' => 'template',
                'default' => 'none'
            ]
        );*/
        $this->add_control(
            'metaFilter',
                [
                    'label' => __('Meta Filter', 'dynamic-content-for-elementor'),
                    'type'      => 'ooo_query',
                    'placeholder'   => __( 'Field key or Name', 'dynamic-content-for-elementor' ),
                    'label_block'   => true,
                    'query_type'    => 'fields',
                    'object_type'   => 'user',
                    'default' => 'none'
                ]
        );
        $this->add_control(
            'metaValue_filter', [
                'label' => __('Meta value', 'dynamic-content-for-elementor'),
                'description' => __('The value of the filter. If multiple (,) separator', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::TEXT,
                'default' => '',
                'condition' => [
                    'metaFilter!' => '',
                ],
            ]
        );
        $this->add_control(
            'exclude_heading', [
                'label' => __('Exclude', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::HEADING,
                'separator' => 'before'
            ]
        );
        
        $this->add_control(
            'exclude_user',
                [
                    'label' => __('Exclude user', 'dynamic-content-for-elementor'),
                    'type'      => 'ooo_query',
                    'placeholder'   => __( 'Select user', 'dynamic-content-for-elementor' ),
                    'label_block'   => true,
                    'multiple' => true,
                    'query_type'    => 'users',
                    //'object_type'   => 'editor',
                    
                    
                ]
        );
        $this->add_control(
            'exclude_author_post', [
                'label' => __('Exclude Authors', 'dynamic-content-for-elementor'),
                'description' => 'Exclude users if they have not made articles',
                'type' => Controls_Manager::SWITCHER,
            ]
        );
        $this->add_control(
            'users_render', [
                'label' => __('Render mode', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::CHOOSE,
                'options' => [
                    'byitems' => [
                        'title' => __('By Items', 'dynamic-content-for-elementor'),
                        'icon' => 'fa fa-list',
                    ],
                    'template' => [
                        'title' => __('Template', 'dynamic-content-for-elementor'),
                        'icon' => 'fa fa-th-large',
                    ]
                ],
            'toggle' => false,
            'default' => 'byitems',
            'separator' => 'before',
                ]
        );
        $this->add_control(
            'users_render_template',
            [
                'label' => __('Template', 'dynamic-content-for-elementor'),
                'type' => 'ooo_query',
                'placeholder' => __('Template Name', 'dynamic-content-for-elementor'),
                'label_block' => true,
                'query_type' => 'posts',
                'object_type' => 'elementor_library',
                'condition' => [
                    'users_render' => 'template',
                ],
            ]
        );
        $this->add_control(
            'layout_position', [
                'label' => __('Layout', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::SELECT,
                'default' => '',
                'tablet_default' => '',
                'mobile_default' => '',
                'render_type' => 'template',
                'options' => [
                    '' => __('None', 'dynamic-content-for-elementor'),
                    'top' => __('Top', 'dynamic-content-for-elementor'),
                    //'bottom' => __( 'Bottom', 'dynamic-content-for-elementor' ),
                    'left' => __('Left', 'dynamic-content-for-elementor'),
                    'right' => __('Right', 'dynamic-content-for-elementor'),
                    'alternate' => __('Alternate', 'dynamic-content-for-elementor'),
                ],
                'prefix_class' => 'layout-user-position-',
                'condition' => [
                    'users_render' => 'byitems',
                ],
            ]
        );
        $this->add_responsive_control(
            'image_rate', [
                'label' => __('Rate', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::SLIDER,
                'default' => [
                    'size' => 50,
                    'unit' => '%',
                ],
                'size_units' => ['px', '%'],
                'range' => [
                    '%' => [
                        'min' => 1,
                        'max' => 100,
                    ],
                    'px' => [
                        'min' => 1,
                        'max' => 600,
                    ]
                ],
                'selectors' => [
                    '{{WRAPPER}} .dce-user_image' => 'width: {{SIZE}}{{UNIT}};',
                    '{{WRAPPER}} .dce-user_content' => 'width: calc( 100% - {{SIZE}}{{UNIT}} );',
                ],
                'condition' => [
                    'layout_position' => ['left', 'right', 'alternate'],
                ],
            ]
        );
        $this->add_responsive_control(
            'content_padding', [
                'label' => __('Content Padding', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%', 'em'],
                'selectors' => [
                    '{{WRAPPER}} .dce-user_content' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'condition' => [
                    'layout_position!' => '',
                ]
            ]
        );
        $repeater = new Repeater();

        $repeater->start_controls_tabs('tabs_repeater'); // start tabs ---------------------------------
        $repeater->start_controls_tab('tab_content', ['label' => __('Meta', 'dynamic-content-for-elementor')]);
        //
        $repeater->add_control(
                'meta', [
            'label' => __('Meta', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'userlogin',
            'options' => [
                'userlogin' => __('User Login', 'dynamic-content-for-elementor'),
                'email' => __('Email', 'dynamic-content-for-elementor'),
                'nickname' => __('Nik Name', 'dynamic-content-for-elementor'),
                'displayname' => __('Display Name', 'dynamic-content-for-elementor'),
                'lastname' => __('Last Name', 'dynamic-content-for-elementor'),
                'firstname' => __('First Name', 'dynamic-content-for-elementor'),
                'description' => __('Description', 'dynamic-content-for-elementor'),
                'avatar' => __('Avatar', 'dynamic-content-for-elementor'),
                'website' => __('WebSite', 'dynamic-content-for-elementor'),
                'role' => __('Role', 'dynamic-content-for-elementor'),
                'custommeta' => __('Custom Meta', 'dynamic-content-for-elementor'),
                'ID' => __('ID', 'dynamic-content-for-elementor'),
                'attachments' => __('Attachments', 'dynamic-content-for-elementor'),
                'articles' => __('Articles', 'dynamic-content-for-elementor'),
                'button' => __('Button', 'dynamic-content-for-elementor'),
            ],
                ]
        );
        $repeater->add_control(
                'text_before', [
            'label' => __('Text before', 'dynamic-content-for-elementor'),
            'description' => __('Text before element', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::TEXT,
            'default' => '',
                ]
        );
        $repeater->add_control(
                'text_button', [
            'label' => __('Text before', 'dynamic-content-for-elementor'),
            'description' => __('Text before element', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::TEXT,
            'default' => __('Read more','dynamic-content-for-elementor_texts'),
            'condition' => [
                        'meta' => 'button',
                    ],
                ]
        );
        /* $repeater->add_control(
          'meta_key', [
          'label' => __('Meta key', 'dynamic-content-for-elementor'),
          'description' => __('La chiave del campo personalizzato', 'dynamic-content-for-elementor'),
          'type' => Controls_Manager::TEXT,
          'default' => '',
          'condition' => [
          'meta' => 'custommeta',
          ],
          ]
          ); */
        /*$repeater->add_control(
                'meta_key', [
            'label' => __('All Meta', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT2,
            'multiple' => false,
            'options' => $user_meta,
            'description' => __('Select the Custom Field', 'dynamic-content-for-elementor'),
            //'render_type' => 'template',
            'condition' => [
                'meta' => 'custommeta',
            ],
                ]
        );*/
        $repeater->add_control(
            'meta_key',
                [
                    'label' => __('All Meta', 'dynamic-content-for-elementor'),
                    'type'      => 'ooo_query',
                    'placeholder'   => __( 'Field key or Name', 'dynamic-content-for-elementor' ),
                    'label_block'   => true,
                    'query_type'    => 'fields',
                    'object_type'   => 'user',
                    'default'       => 'nickname',
                    'condition' => [
                        'meta' => 'custommeta',
                    ],
                ]
        );
        $repeater->add_control(
                'article_post_type', [
            'label' => __('Article Post Type', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT2,
            'options' => DCE_Helper::get_post_types(),
            'multiple' => true,
            'label_block' => true,
            'default' => 'post',
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );

        $repeater->add_control(
                'attachment_url', [
            'label' => __('Attachment URL', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta' => 'attachments',
            ],
                ]
        );
        $repeater->add_control(
                'articles_url', [
            'label' => __('Articles URL', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );
        $repeater->add_control(
                'link_to_page', [
            'label' => __('Link to page', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles'],
            ],
                ]
        );
        $repeater->add_control(
                'link_to', [
            'label' => __('Link to', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'user_page',
            'options' => [
                'user_page' => __('User page', 'dynamic-content-for-elementor'),
                'other_url' => __('Meta URL', 'dynamic-content-for-elementor'),
                'custom' => __('Custom URL', 'dynamic-content-for-elementor'),
            ],
            'condition' => [
                'link_to_page' => 'yes',
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'custom_link', [
            'label' => __('Link url', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::URL,
            'placeholder' => __('http://your-link.com', 'dynamic-content-for-elementor'),
            'condition' => [
                'link_to' => 'custom',
            ],
            'default' => [
                'url' => '',
            ],
            'show_label' => false,
                ]
        );


        $user_meta_url = DCE_Helper::get_acf_field_urlfile();
        /* foreach ($user_meta as $akey => $avalue) {
          $url = get_user_meta($user_id, $avalue, true); // non ho l'id utente e i campi nn sono ancora valorizzati...
          if (filter_var($url, FILTER_VALIDATE_URL)) {
          $user_meta_url[$avalue] = $url;
          }
          } */

        $repeater->add_control(
                'meta_field_url', [
            'label' => __('Meta Field Url', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'options' => $user_meta_url,
            'default' => 'Select the Field',
            'condition' => [
                //'acf_type' => ['url', 'file'],
                'link_to_page' => 'yes',
                'link_to' => 'other_url',
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'meta_field_url_target_blank', [
            'label' => __('Target blank', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'link_to_page' => 'yes',
                'link_to' => 'other_url',
                'meta!' => ['attachments', 'articles'],
                'meta_field_url!' => ''
            ]
                ]
        );
        $repeater->add_control(
                'inline_item', [
            'label' => __('Inline', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'hide_item', [
            'label' => __('Hide item', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles', 'button']
            ]
                ]
        );
        $repeater->end_controls_tab();
        $repeater->start_controls_tab('tab_style', ['label' => __('Style', 'dynamic-content-for-elementor')]);
        //
        $repeater->add_responsive_control(
                'align_item', [
            'label' => __('Alignment', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'toggle' => true,
            'options' => [
                'left' => [
                    'title' => __('Left', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-left',
                ],
                'center' => [
                    'title' => __('Center', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-center',
                ],
                'right' => [
                    'title' => __('Right', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-right',
                ]
            ],
            'default' => '',
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}' => 'text-align: {{VALUE}};',
            ],
            
                //'prefix_class' => 'acfposts-align-'
                ]
        );
        $repeater->add_control(
                'padding_item', [
            'label' => __('Padding', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $repeater->add_control(
                'color_item', [
            'label' => __('Text color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el, {{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el a' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_control(
                'hover_color_item', [
            'label' => __('Hover color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el:hover a' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar'],
                'link_to_page' => 'yes',
            ],
                ]
        );
        $repeater->add_control(
                'bgcolor_item', [
            'label' => __('Background color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}' => 'background-color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_control(
                'hover_bgcolor_item', [
            'label' => __('Background hover color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}:hover' => 'background-color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_item',
            'label' => 'Typography item',
            'scheme' => Scheme_Typography::TYPOGRAPHY_1,
            'selector' => '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el',
            'condition' => [
                'meta!' => ['attachments', 'avatar']
            ],
                ]
        );
        // --------------------------- Attachments
        $repeater->add_control(
                'hr_1', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'meta' => 'attachments',
            ],
                ]
        );
        $repeater->add_responsive_control(
                'columns_grid_attachments', [
            'label' => __('Columns', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7',
                '8' => '8',
                '9' => '9',
                '10' => '10'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_attach' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_control(
                'flex_grow_attachments', [
            'label' => __('Flex grow', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 1,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_attach' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_responsive_control(
                'flexgrid_mode_attachments', [
            'label' => __('Alignment grid', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .grid-attach' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Image_Size::get_type(), [
            'name' => 'size_attachment',
            'label' => __('Image Size', 'dynamic-content-for-elementor'),
            'default' => 'thumbnail',
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        // --------------------------- Articles
        $repeater->add_control(
                'hr_2', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );
        $repeater->add_responsive_control(
                'columns_grid_articles', [
            'label' => __('Columns', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7',
                '8' => '8',
                '9' => '9',
                '10' => '10'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_article' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_control(
                'flex_grow_articles', [
            'label' => __('Flex grow', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 1,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_article' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_responsive_control(
                'flexgrid_mode_articles', [
            'label' => __('Alignment grid', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .grid-articles' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Image_Size::get_type(), [
            'name' => 'size_articles',
            'label' => __('Image Size', 'dynamic-content-for-elementor'),
            'default' => 'thumbnail',
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        // --------------------------- Text Before
        $repeater->add_control(
                'hr_3', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_control(
                'txbefore_heading', [
            'label' => __('Text Before', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::HEADING,
            'separator' => 'before',
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_control(
                'color_txbefore', [
            'label' => __('Text before Color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} .tx-before' => 'color: {{VALUE}};',
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} a .tx-before' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_txbefore',
            'label' => 'Typography text before',
            'scheme' => Scheme_Typography::TYPOGRAPHY_1,
            'selector' => '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} .tx-before',
            'popover' => true,
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );




        $repeater->end_controls_tab();
        $repeater->end_controls_tabs(); // end tabs ----------------------------------------------------

        $this->add_control(
            'user_meta_items', [
                'label' => __('User Meta Items', 'dynamic-content-for-elementor'),
                'type' => Controls_Manager::REPEATER,
                'default' => [
                    [
                        'meta' => 'avatar',
                    ],
                    [
                        'meta' => 'userlogin',
                    ],
                    [
                        'meta' => 'email',
                    ],
                    [
                        'meta' => 'nickname',
                    ]
                ],
                'fields' => array_values($repeater->get_controls()),
                'title_field' => 'Item',
                'title_field' => '{{{ meta }}}',
                'render_type' => 'template',
                'condition' => [
                        'users_render' => 'byitems',
                    ],
            ]
        );







        $this->end_controls_section();

        //////////////////////////////////////////////////////////////////////////// [ SECTION Avatar ]
        $this->start_controls_section(
            'section_avatar', [
                'label' => __('Avatar', 'dynamic-content-for-elementor'),
                'tab' => Controls_Manager::TAB_CONTENT,
                'condition' => [
                        'users_render' => 'byitems',
                    ],
            ]
        );
        $this->add_control(
                'avatar_size', [
            'label' => __('Avatar Size', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 80,
            ],
            'range' => [
                'px' => [
                    'min' => 10,
                    'max' => 1200,
                    'step' => 1,
                ],
            ],
            'size_units' => ['px', '%'],
                ]
        );
        $this->add_group_control(
                Group_Control_Border::get_type(), [
            'name' => 'border_avatar',
            'label' => __('Border', 'dynamic-content-for-elementor'),
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar img',
                ]
        );

        $this->add_responsive_control(
                'border_radius_avatar', [
            'label' => __('Border Radius', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .user-avatar, {{WRAPPER}} .dce-item-user .user-avatar img, {{WRAPPER}} .dce-overlay_hover, {{WRAPPER}} .dce-overlay' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $this->add_control(
                'padding_avatar', [
            'label' => __('Padding', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .user-avatar, {{WRAPPER}} .dce-overlay_hover, {{WRAPPER}} .dce-overlay' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $this->add_group_control(
                Group_Control_Box_Shadow::get_type(), [
            'name' => 'box_shadow_avatar',
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar',
                ]
        );
        $this->add_group_control(
                DCE_Group_Control_Filters_CSS::get_type(), [
            'name' => 'filters_avatar',
            'label' => 'Filters',
            //'selector' => '{{WRAPPER}} img, {{WRAPPER}} .dynamic-content-featuredimage-bg',
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar',
                ]
        );
        $this->end_controls_section();
        //////////////////////////////////////////////////////////////////////////// [ SECTION Grid ]
        $this->start_controls_section(
                'section_grid', [
            'label' => __('Grid style', 'dynamic-content-for-elementor'),
            'tab' => Controls_Manager::TAB_CONTENT,
                ]
        );
        $this->add_control(
                'posts_style', [
            'label' => __('Style', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'flexgrid',
            'frontend_available' => true,
            'render_type' => 'template',
            'options' => [
                'simplegrid' => __('Row', 'dynamic-content-for-elementor'),
                'flexgrid' => __('Flex Grid', 'dynamic-content-for-elementor'),
                'grid' => __('Grid Masonry', 'dynamic-content-for-elementor'),
            ]
                ]
        );
        $this->add_responsive_control(
                'columns_grid_flex', [
            'label' => __('Columns', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'render_type' => 'template',
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users.flexgrid .dce-item-user' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
                '{{WRAPPER}} .dce-grid-users.grid .dce-item-user' => 'width: calc( 100% / {{VALUE}} );'
            ],
            'condition' => [
                'posts_style' => ['grid', 'flexgrid'],
            ],
                ]
        );
        /*
          flex-grow: 0;
          flex-shrink: 1;
          flex-basis: calc(33.3333%)
         */

        $this->add_control(
                'flex_grow', [
            'label' => __('Flex grow', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 0,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'posts_style' => 'flexgrid',
            ],
                ]
        );
        $this->add_responsive_control(
                'flexgrid_mode', [
            'label' => __('Alignment grid', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'posts_style' => 'flexgrid',
                'flex_grow' => '0'
            ],
                ]
        );
        $this->add_control(
                'filters_enable', [
            'label' => __('Show Filters', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SWITCHER,
            'frontend_available' => true,
            'condition' => [
                'posts_style' => 'grid',
            ],
                ]
        );
        $this->add_responsive_control(
                'grid_space', [
            'label' => __('Column Space', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 15,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', 'rem'],
            'range' => [
                'rem' => [
                    'min' => 0,
                    'max' => 10,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'padding-left: {{SIZE}}{{UNIT}}; padding-right: {{SIZE}}{{UNIT}};',
            ]
                ]
        );
        $this->add_responsive_control(
                'row_grid_space', [
            'label' => __('Row Space', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 15,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', 'rem'],
            'range' => [
                'rem' => [
                    'min' => 0,
                    'max' => 10,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'padding-bottom: {{SIZE}}{{UNIT}};',
            ]
                ]
        );
        $this->add_responsive_control(
                'layout_align', [
            'label' => __('Alignment', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                'none' => [
                    'title' => __('None', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-close',
                ],
                'left' => [
                    'title' => __('Left', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-left',
                ],
                'center' => [
                    'title' => __('Center', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-center',
                ],
                'right' => [
                    'title' => __('Right', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-right',
                ]
            ],
            'default' => 'none',
            'toggle' => false,
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users' => 'text-align: {{VALUE}};',
            ],
                //'prefix_class' => 'acfposts-align-'
                ]
        );
        $this->end_controls_section();

        // ------------------------------------------------------------------------------------ [ SECTION Filters ]

        $this->start_controls_section(
                'section_filters', [
            'label' => __('Filters', 'dynamic-content-for-elementor'),
            'tab' => Controls_Manager::TAB_CONTENT,
            'condition' => [
                'filters_enable' => 'yes',
            ],
                ]
        );
        /*$this->add_control(
                'filters_meta', [
            'label' => __('Filters Meta', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SELECT,
            'options' => $user_meta,
            'multiple' => true,
            //'render_type' => 'template',
            'default' => 'none'
                ]
        );*/
        $this->add_control(
            'filters_meta',
                [
                    'label' => __('Filters Meta', 'dynamic-content-for-elementor'),
                    'type'      => 'ooo_query',
                    'placeholder'   => __( 'Field key or Name', 'dynamic-content-for-elementor' ),
                    'label_block'   => true,
                    'query_type'    => 'fields',
                    'object_type'   => 'user',
                    'default' => 'none'
                ]
        );
        /* $this->add_control(
          'filters_taxonomy', [
          'label' => __('Data Filters (Taxonomy)', 'dynamic-content-for-elementor'),
          'type' => Controls_Manager::SELECT,
          //'options' => get_post_taxonomies( $post->ID ),
          'options' => [ '' => __('None', 'dynamic-content-for-elementor')] + get_taxonomies(array('public' => true)),
          'default' => 'category',
          'condition' => [
          'filters_enable' => 'yes',
          ],
          ]
          );
          $this->add_control(
          'filters_acf', [
          'label' => __('Data Filters (ACF)', 'dynamic-content-for-elementor'),
          'type' => Controls_Manager::SELECT,
          //'options' => get_post_taxonomies( $post->ID ),
          'options' => $this->get_acf_field(),
          'default' => '0',
          'condition' => [
          'filters_enable' => 'yes',
          ],
          ]
          ); */
        $this->add_control(
                'separator_filter', [
            'label' => __('Separator', 'dynamic-content-for-elementor'),
            //'description' => __('Separator caracters.','dynamic-content-for-elementor'),
            'type' => Controls_Manager::TEXT,
            'default' => ' / ',
            'condition' => [
                'filters_enable' => 'yes',
            ],
                ]
        );
        $this->add_responsive_control(
                'filters_align', [
            'label' => __('Filters Alignment', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                'left' => [
                    'title' => __('Left', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-left',
                ],
                'center' => [
                    'title' => __('Center', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-center',
                ],
                'right' => [
                    'title' => __('Right', 'dynamic-content-for-elementor'),
                    'icon' => 'fa fa-align-right',
                ]
            ],
            'default' => 'left',
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters' => 'text-align: {{VALUE}};',
            ],
            'condition' => [
                'filters_enable' => 'yes',
            ],
                //'prefix_class' => 'acfposts-align-'
                ]
        );
        // ------------------------------------------------- [ section Style - Filters ] users-filters-item dce-users-filters
        $this->add_control(
                'filters_color', [
            'label' => __('Filters Color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item a' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_hover', [
            'label' => __('Filters Color Hover', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item a:hover' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_active', [
            'label' => __('Filters Color Active', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'default' => '#990000',
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item.filter-active a' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_divisore', [
            'label' => __('Divider Filters Color', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_filters',
            'label' => __('Typography Filters', 'dynamic-content-for-elementor'),
            'selector' => '{{WRAPPER}} .dce-users-filters',
                ]
        );
        $this->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_filters_divider',
            'label' => __('Typography Divider', 'dynamic-content-for-elementor'),
            'scheme' => Scheme_Typography::TYPOGRAPHY_2,
            'selector' => '{{WRAPPER}} .dce-users-filters .filters-divider',
                ]
        );
        $this->add_responsive_control(
                'filters_padding_items', [
            'label' => __('Spazio tra i filtri', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 5,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', '%'],
            'range' => [
                '%' => [
                    'min' => 0,
                    'max' => 100,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'padding-left: {{SIZE}}{{UNIT}}; padding-right: {{SIZE}}{{UNIT}};',
            ],
                ]
        );
        $this->add_control(
                'filters_padding', [
            'label' => __('Padding', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                /* 'condition' => [
                  'gallery_display_caption' => '',
                  ], */
                ]
        );
        $this->add_responsive_control(
                'filters_move_divider', [
            'label' => __('Vertical Shift Divider', 'dynamic-content-for-elementor'),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 0,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', '%'],
            'range' => [
                '%' => [
                    'min' => -100,
                    'max' => 100,
                ],
                'px' => [
                    'min' => -100,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'top: {{SIZE}}{{UNIT}}; position: relative;',
            ],
                ]
        );
        $this->end_controls_section();
    }

    protected function render() {
        $settings = $this->get_settings_for_display();
        if (empty($settings))
            return;

        ///////////////////////////////////////////////////////////// Filters /////////////////////////////////////////
        if ($settings['filters_enable'] && $settings['posts_style'] == 'grid') {
            $tag_filter = 'span';
            $divisore_f = '';

            // recupero la lista degli elementi che appartengono a un determinato user_meta.
            $list_filters = array();
            // il meta: $settings['filters_meta']
            /* $args = array(
              'fields' => array( 'ID' ),
              'meta_key' => $settings['filters_meta'],
              //'meta_value' => $_GET['th_struttura']
              ); */
            $users = get_users(/* $args */);
            $list_isotope_filters = [];
            foreach ($users as $user) {
                $valore_meta = get_user_meta($user->ID, $settings['filters_meta'], true);
                if ($valore_meta != '') {
                    $list_isotope_filters[$valore_meta] = $user->{$settings['filters_meta']};
                }
            }
            //array_unique($user_ids);
            //var_dump($list_isotope_filters);

            echo '<div class="dce-users-filters">';
            $cont_f = 1;
            if (!empty($list_isotope_filters)) {

                echo '<' . $tag_filter . ' class="users-filters-item filter-active">' . $divisore_f . '<a href="#" data-filter="*">' . __('All', 'dynamic-content-for-elementor') . '</a></' . $tag_filter . '>';
                foreach ($list_isotope_filters as $filter) {
                    // L'etichetta del filtro
                    $filternome = $filter;

                    // Lo slug del filtro
                    $filterslug = sanitize_title($filter); // poi dovrò convertire in stringa semplificata da trattini e minuscole

                    /* if( $cont_f > 1) */ $divisore_f = '<span class="filters-divider">' . $settings['separator_filter'] . '</span>';
                    if ($filternome != "")
                        echo '<' . $tag_filter . ' class="users-filters-item">' . $divisore_f . '<a href="#" data-filter=".' . $filterslug . '">' . $filternome . '</a></' . $tag_filter . '>';
                    $cont_f++;
                }
            }
            echo '</div>';
        }

        $styleClass = '';
        // ------- Simple Grid--------------------------------------------------
        if ($settings['posts_style'] == 'simplegrid') {
            $styleClass = ' simplegrid';
        } else
        // ------- Flex Grid --------------------------------------------------
        if ($settings['posts_style'] == 'flexgrid') {
            $styleClass = ' flexgrid';
        } else
        // ------- Grid data --------------------------------------------------
        if ($settings['posts_style'] == 'grid') {
            $styleClass = ' grid';
        }
        ///////////////////////////////////////////////////////////// Grid Users /////////////////////////////////////////
        if ($settings['metaFilter'] == 'none')
            $settings['metaFilter'] = array();
        $userargs = array(
            'blog_id' => $GLOBALS['blog_id'],
            'role' => '',
            'role__in' => $settings['roles'],
            'role__not_in' => array(),
            //'meta_key' => $settings['metaFilter'],
            //'meta_value' => $settings['metaValue_filter'],
            //'meta_compare' => '',
            
            //'date_query' => array(),
            'include' => array(),
            'exclude' => $settings['exclude_user'],

            'meta_key' => $settings['users_orderby_meta'],

            'orderby' => $settings['users_orderby'],
            'order' => $settings['users_order'],

            // 'offset' => '',
            // 'search' => '',
            // 'number' => '',
            // 'count_total' => false,
            // 'fields' => 'all', //array( 'ID' )
            // 'who' => '',
        );
        //var_dump($settings['metaValue_filter']);
        $array_value = DCE_Helper::str_to_array(',',$settings['metaValue_filter']);

        if($settings['metaFilter']){
            $cacca = array(
                    'relation' => 'OR',
                    
                );
            foreach ($array_value as $key => $value) {
                $cacca[] = array(
                        'key' => $settings['metaFilter'],
                        'value' => $value,
                        'compare' => '='//'LIKE' //'=='
                    );
            }
            $userargs['meta_query'] = $cacca;
            //$userargs['meta_value'] = $array_value[0];
            //$userargs['meta_key'] = $settings['metaFilter'];
            //var_dump($userargs);
        }
        if ($settings['author_user'] == 'yes') {
            $author = get_the_author_meta('ID');

            $userargs['include'] = array($author);
            //echo 'cosa??'.$author;
        }
        
        // ! ! ! ! ! ! ! ! ! ! ! ! ! 
        $users = get_users($userargs);
        //$users = new WP_User_Query( $userargs );
        // ! ! ! ! ! ! ! ! ! ! ! ! ! 

        global $global_ID;
        $original_global_id = $global_ID;




        /*
        // .............................................................
        // Da valutare se usare la WP_User_Query invece di getusers()...
        // .............................................................

        // Create the WP_User_Query object
        $wp_user_query = new \WP_User_Query( $userargs );

        // Get the results
        $authors = $wp_user_query->get_results();

        // Check for results
        if ( ! empty( $authors ) ) {
            echo '<ul>';
            // loop through each author
            foreach ( $authors as $user ) {
                // get all the user's data
                $user_info = get_userdata( $user->ID );
                


                $global_ID = $user->ID;
                //echo $user->ID;
                if(\Elementor\Plugin::$instance->editor->is_edit_mode()){
                    $inlinecss = 'inlinecss="true"';
                }else{
                    $inlinecss = '';
                }
                //echo $settings['users_render'];
                echo do_shortcode('[dce-elementor-template id="' . $settings['users_render_template'] . '" '.$inlinecss.']');
            }
            echo '</ul>';
        } else {
            echo 'No authors found';
        }
        */





        echo '<div class="dce-grid-users' . $styleClass . '">';
        
        foreach ($users as $user) {


            //print_r(get_user_meta ( $user->ID));
            /* echo '<div>ID: ' . esc_html( $user->ID ) . '</div>';
              echo '<div>NiceName: ' . esc_html( $user->nickname ) . '</div>';
              echo '<div>Nome: ' . esc_html( $user->first_name ) . '</div>';
              echo '<div>Cognome: ' . esc_html( $user->last_name ) . '</div>';
              echo '<div>Bio: ' . esc_html( $user->description ) . '</div>';
              echo '<div>Email: ' . esc_html( $user->user_email ) . '</div>';
              echo '<div>Website: ' . esc_html( $user->user_url ) . '</div>';
              echo '<div>Username: ' . esc_html( $user->user_login ) . '</div>';
              echo '<div>Avatar: ' . get_avatar( $user->user_email, 100 ) . '</div>';
              echo '<div>DisplayName: ' . esc_html( $user->display_name ) . '</div>';
              echo '<div>ACF Altezza: ' . esc_html( $user->altezza ) . '</div>';
              echo '<div>Ruolo: ' . esc_html( $user->roles[0] ) . '</div>';
              echo get_avatar_url( $user->user_email ); */
            //
            $user_meta_items = $settings['user_meta_items'];

            // ^^^^^^^^
            

                // -------------------------------------------- 
                // 0 - se i filtri sono abilitati
                $filters_string_class = "";
                if ($settings['filters_enable']) {
                    $filters_string_class = $user->{$settings['filters_meta']};
                    $filters_string_class = ' ' . sanitize_title($filters_string_class);
                    //echo $filters_string_class;
                } // end if filters_enable

                //echo 'numero di posts: '.$this->have_articles($user->ID);
                            
                // verifico se l'utente ha realizzato articoli != 0
                $exclude_author_post = 1;
                if($settings['exclude_author_post']) $exclude_author_post = $this->have_articles($user->ID);
                if( $exclude_author_post ){

                    echo '<div class="dce-item-user' . $filters_string_class . '">';
                    

                    if($settings['users_render'] == 'byitems'){

                        if (!empty($user_meta_items)) {
                        // x/x/x/x/x/x/x/
                        if ($settings['layout_position']) {
                            echo '<div class="dce-user_image">';
                            foreach ($settings['user_meta_items'] as $item) {
                                $classElItem = ' elementor-repeater-item-' . $item['_id'];

                                $openLink = $this->get_link_a($item, $user);
                                $closeLink = ($openLink) ? '</a>' : ''; // end il LINK

                                if ($item['meta'] == 'avatar')
                                    echo '<div class="user-avatar' . $classElItem . '">' . $openLink . get_avatar($user->user_email, $settings['avatar_size']['size']) . $closeLink . '</div>';
                            }
                            echo '</div>';
                        }
                        echo '<div class="dce-user_content">';

                        foreach ($settings['user_meta_items'] as $item) {

                            $classElItem = ' elementor-repeater-item-' . $item['_id'];

                            $inlineItem = '';
                            if ($item['inline_item'] == 'yes') {
                                $inlineItem = ' inline-useritem';
                                $classElItem .= $inlineItem;
                            }
                            
                            // text_button
                            $openLink = $this->get_link_a($item, $user);
                            $closeLink = ($openLink) ? '</a>' : ''; // end il LINK

                            $show_item = true;
                            if ($item['hide_item']) {
                                $show_item = false;
                            }

                            $textBefore = '';
                            if ($item['text_before'] != '' && $show_item) {
                                $textBefore = '<span class="tx-before">' . __($item['text_before'], 'dynamic-content-for-elementor_texts') . '</span>';
                            }

                            //echo '<dt class="repeater-' . $item['_id'] . '">' .  $item['meta'] . '</dt>';
                            $user_data_view = '';
                            if ($item['meta'] == 'ID' && $show_item) {
                                $user_data_view = $user->ID;
                            } else if ($item['meta'] == 'userlogin' && $show_item) {
                                $user_data_view = $user->user_login;
                            } else if ($item['meta'] == 'nickname' && $show_item) {
                                $user_data_view = $user->nickname;
                            } else if ($item['meta'] == 'displayname' && $show_item) {
                                $user_data_view = $user->display_name;
                            } else if ($item['meta'] == 'firstname' && $show_item) {
                                $user_data_view = $user->first_name;
                            } else if ($item['meta'] == 'lastname' && $show_item) {
                                $user_data_view = $user->last_name;
                            } else if ($item['meta'] == 'description' && $show_item) {
                                $user_data_view = $user->description;
                            } else if ($item['meta'] == 'email' && $show_item) {
                                $user_data_view = $user->user_email;
                            } else if ($item['meta'] == 'website' && $show_item) {
                                $user_data_view = $user->url;
                            } else if ($item['meta'] == 'avatar' && $show_item) {
                                $user_data_view = get_avatar($user->user_email, $settings['avatar_size']['size']);
                            } else if ($item['meta'] == 'role' && $show_item) {
                                $user_data_view = $user->roles[0];
                            } else if ($item['meta'] == 'custommeta' && $show_item) {
                                $user_data_view = $item['meta_key'];
                            } else if ($item['meta'] == 'button' && $show_item) {
                                $user_data_view = $item['text_button'];
                            }

                            //echo '.... '.$user_data_view;
                            /* if( $item['link_to'] != '' && empty($urlToPage) && !$show_item ){
                              return;
                              } */

                            //echo '<dt class="repeater-' . $item['_id'] . '">' .  $item['meta'] . '</dt>';
                            if ($item['meta'] == 'ID')
                                echo '<div class="user-id tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                            else if ($item['meta'] == 'userlogin')
                                echo '<div class="user-userlogin tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'nickname' && !empty($user_data_view))
                                echo '<div class="user-nickname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                            else if ($item['meta'] == 'displayname' && !empty($user_data_view))
                                echo '<div class="user-displayname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'firstname' && !empty($user_data_view))
                                echo '<div class="user-firstname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                            else if ($item['meta'] == 'lastname' && !empty($user_data_view))
                                echo '<div class="user-lastname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'description' && !empty($user_data_view))
                                echo '<div class="user-description tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $openLink . '</div>';
                            else if ($item['meta'] == 'email')
                                echo '<div class="user-email tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'website' && !empty($user_data_view))
                                echo '<div class="user-website tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'avatar' && $settings['layout_position'] == '')
                                echo '<div class="user-avatar' . $classElItem . '">' . $openLink . $textBefore . $user_data_view . $closeLink . '</div>';

                            else if ($item['meta'] == 'role')
                                echo '<div class="user-role tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $$closeLink . '</div>';

                            else if ($item['meta'] == 'button')
                                echo '<div class="user-button tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                            else if ($item['meta'] == 'custommeta') {

                                $metak = $item['meta_key'];
                                if (!empty($metak)) {
                                    echo '<div class="user-custommeta tx-el' . $classElItem . '">' . $openLink . $textBefore;
                                    if (!empty($user_data_view))
                                        //$user->{$user_data_view};
                                        //the_field($metak, 'user_'.$user->ID);
                                        echo get_user_meta($user->ID, $metak, true);
                                    echo $closeLink . '</div>';
                                }
                            }
                            //esc_html( $user->str_split($item['meta_key']) )



                            else if ($item['meta'] == 'attachments') {
                                $user_ids_att = array();
                                $user_ids_att[] = $user->ID;
                                //
                                echo '<div class="user-attachments' . $classElItem . '">';
                                $att = $this->get_attachments($textBefore, $user_ids_att, $item['size_attachment_size'], $item['attachment_url']);
                                echo '</div>';
                            } else if ($item['meta'] == 'articles') {
                                $user_ids_att = array();
                                $user_ids_att[] = $user->ID;
                                echo '<div class="user-articles' . $classElItem . '">';
                                $att = $this->get_articles($textBefore, $user_ids_att, $item['size_articles_size'], $item['article_post_type'], $item['articles_url']);
                                echo '</div>';
                            }
                        }
                        echo '</div>'; // end content



                        }
                    }else{
                        
                        $global_ID = $user->ID;

                        //echo $user->ID;
                        if(\Elementor\Plugin::$instance->editor->is_edit_mode()){
                            $inlinecss = 'inlinecss="true"';
                        }else{
                            $inlinecss = '';
                        }
                        //echo $settings['users_render'];

                        echo do_shortcode('[dce-elementor-template user_id="'.$user->ID.'" author_id="'.$user->ID.'" id="' . $settings['users_render_template'] . '" '.$inlinecss.']');
                    }
                    // x/x/x/x/x/x/x/




                    echo '</div>'; // end item

                } // end controllo se ha realizzato post
                //
           
        }// end ciclo utenti
        $global_ID = $original_global_id;
        
        echo '</div>';
    }

    protected function _content_template() {
        
    }

    protected function user_fields_labels() {

        $fields = [
            'first_name' => __('First Name', 'dynamic-content-for-elementor'),
            'last_name' => __('Last Name', 'dynamic-content-for-elementor'),
            'first_last' => __('First Name + Last Name', 'dynamic-content-for-elementor'),
            'last_first' => __('Last Name + First Name', 'dynamic-content-for-elementor'),
            'nickname' => __('Nick Name', 'dynamic-content-for-elementor'),
            'display_name' => __('Display Name', 'dynamic-content-for-elementor'),
            'user_login' => __('User Name', 'dynamic-content-for-elementor'),
            'description' => __('User Bio', 'dynamic-content-for-elementor'),
            'image' => __('User Image', 'dynamic-content-for-elementor'),
        ];

        return $fields;
    }

    protected function user_data($selected = '') {

        global $post;

        $author_id = $post->post_author;

        $fields = [
            'first_name' => get_the_author_meta('first_name', $author_id),
            'last_name' => get_the_author_meta('last_name', $author_id),
            'first_last' => sprintf('%s %s', get_the_author_meta('first_name', $author_id), get_the_author_meta('last_name', $author_id)),
            'last_first' => sprintf('%s %s', get_the_author_meta('last_name', $author_id), get_the_author_meta('first_name', $author_id)),
            'nickname' => get_the_author_meta('nickname', $author_id),
            'display_name' => get_the_author_meta('display_name', $author_id),
            'user_login' => get_the_author_meta('user_login', $author_id),
            'description' => get_the_author_meta('description', $author_id),
            'image' => get_avatar(get_the_author_meta('email', $author_id), 256),
        ];

        if (empty($selected)) {
            // Return the entire array
            return $fields;
        } else {
            // Return only the selected field
            return $fields[$selected];
        }
    }

    protected function get_attachments($tx_before, $users, $size_attach, $is_attachment_url) {
        //var_dump($users);
        $acfList = [];
        $tipo = 'attachment';
        $get_attachments = get_posts(
                array(
                    'author__in' => $users,
                    'post_type' => $tipo,
                    'numberposts' => -1,
                    'post_status' => 'any',
                    'orderby' => 'title'
                )
        );
        //echo $tipo;
        //var_dump($users);
        echo '<div class="grid-attach">';
        //echo $size_attach;
        if (!empty($get_attachments)) {
            echo $tx_before;
            foreach ($get_attachments as $media) {
                //echo '<br>'.$media->ID;
                //echo $is_attachment_url;
                echo '<div class="item_attach">';
                if ($is_attachment_url == 'yes')
                    echo '<a href="' . get_permalink($media->ID) . '">';
                echo wp_get_attachment_image($media->ID, $size_attach);
                if ($is_attachment_url == 'yes')
                    echo '</a>';
                echo '</div>';
                //echo apply_filters( 'the_title', $media->post_title );
            }
        }
        echo '</div>';
        //return $get_attachments;
    }
    protected function all_users_list(){
        $userList = array();
        $users = get_users(/* $args */);
        
        foreach ($users as $user) {
            $userList[$user->ID] = $user->user_login;
        }
        return $userList;
    }
    protected function have_articles($userId){
        $get_articles = get_posts(
                array(
                    'author__in' => $userId,
                    'post_type' => 'any',
                    'numberposts' => -1,
                    'post_status' => 'publish',
                    'public' => true,
                    
                )
        );
        return count($get_articles);
    }
    protected function get_articles($tx_before, $users, $size_art, $type_art, $is_article_url) {
        //var_dump($users);
        $acfList = [];
        $tipo = $type_art;
        //var_dump($tipo);
        //echo $item['article_post_type'];
        $get_articles = get_posts(
                array(
                    'author__in' => $users,
                    'post_type' => $tipo,
                    'numberposts' => -1,
                    'post_status' => 'publish',
                    'public' => true,
                    'orderby' => 'title'
                )
        );
        //echo $tipo;
        //var_dump($users);
        echo '<div class="grid-articles">';
        //echo $size_art;
        if (!empty($get_articles)) {
            echo $tx_before;
            foreach ($get_articles as $art) {
                //var_dump($art);
                $featuredImageID = get_post_thumbnail_id($art->ID);
                //if($featuredImageID){ echo $featuredImageID; }else{ echo 'nulla'; };
                //echo '<br>'.$art->ID;
                //echo $is_article_url;
                echo '<div class="item_article">';
                //echo $art->ID.' - '.$size_art;
                if ($is_article_url == 'yes')
                    echo '<a href="' . get_permalink($art->ID) . '">';
                if ($featuredImageID) {
                    echo wp_get_attachment_image($featuredImageID, $size_art);
                } else {
                    echo '<img src="' . DCE_Helper::get_placeholder_image_src() . '" />';
                }

                echo '<div class="tit-art tx-el">' . get_the_title($art->ID) . '</div>';
                if ($is_article_url == 'yes')
                    echo '</a>';
                echo '</div>';
                //echo apply_filters( 'the_title', $media->post_title );
            }
        }
        echo '</div>';
        //return $get_attachments;
    }

    public function get_link_a($item, $user) {
        $urlToPage = '';
        $target = '';
        $openLink = '';
        if ($item['link_to_page']) {
            if ($item['link_to'] == 'other_url' && $item['meta_field_url']) {
                //$urlToPage = esc_url( get_field( $item['meta_field_url'] , $user->ID) ); //get_field($item['meta_field_url']);
                $urlToPage = $user->{$item['meta_field_url']};
                if (isset($item['meta_field_url_target_blank']) && $item['meta_field_url_target_blank']) {
                    $target = 'target="_blank"';
                }
            } else if ($item['link_to'] == 'user_page') {
                $urlToPage = get_author_posts_url($user->ID);
            } else if ($item['link_to'] == 'custom') {
                if (!empty($item['custom_link']['url'])) {
                    $urlToPage = esc_url($item['custom_link']['url']);
                } else {
                    $urlToPage = false;
                }
                $target = $item['custom_link']['is_external'] ? 'target="_blank"' : '';
            }
            if ($item['link_to_page'] == 'yes' && $urlToPage != '') {
                $openLink = '<a data-dnc="layout_position" href="' . $urlToPage . '" ' . $target . '>';
            }
        }
        return $openLink;
    }

}
